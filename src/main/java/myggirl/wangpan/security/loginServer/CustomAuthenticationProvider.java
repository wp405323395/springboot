package myggirl.wangpan.security.loginServer;import myggirl.wangpan.security.author.GrantedAuthorityImpl;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.util.DigestUtils;import java.util.ArrayList;public class CustomAuthenticationProvider implements AuthenticationProvider {    private UserDetailsService userDetailsService;    public CustomAuthenticationProvider(UserDetailsService userDetailsService){        this.userDetailsService = userDetailsService;    }    @Override    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        // 获取认证的用户名 & 密码        String name = authentication.getName();        String password = authentication.getCredentials().toString();        // 认证逻辑        UserDetails userDetails = userDetailsService.loadUserByUsername(name);        if (null != userDetails) {            String encodePassword = DigestUtils.md5DigestAsHex((password).getBytes());            if (userDetails.getPassword().equals(encodePassword)) {                // 这里设置权限和角色                ArrayList<GrantedAuthority> authorities = new ArrayList<>();                authorities.add( new GrantedAuthorityImpl("ADMIN"));                authorities.add( new GrantedAuthorityImpl("DBA"));                // 生成令牌 这里令牌里面存入了:name,password,authorities, 当然你也可以放其他内容                Authentication auth = new UsernamePasswordAuthenticationToken(name, password, authorities);                return auth;            } else {                throw new BadCredentialsException("密码错误");            }        } else {            throw new UsernameNotFoundException("用户不存在");        }    }    @Override    public boolean supports(Class<?> aClass) {        return aClass.equals(UsernamePasswordAuthenticationToken.class);    }}